/*! tailwindcss v4.0.0 | MIT License | https://tailwindcss.com */
@tailwind base;
@tailwind components;
.absolute {
  position: absolute;
}
.relative {
  position: relative;
}
.top-\[50\%\] {
  top: 50%;
}
.z-10 {
  z-index: 10;
}
.z-20 {
  z-index: 20;
}
.z-30 {
  z-index: 30;
}
.z-40 {
  z-index: 40;
}
.flex {
  display: flex;
}
.grid {
  display: grid;
}
.hidden {
  display: none;
}
.table {
  display: table;
}
.aspect-square {
  aspect-ratio: 1 / 1;
}
.h-\[calc\(100vh-\)\] {
  height: calc(100vh - );
}
.h-fit {
  height: fit-content;
}
.h-full {
  height: 100%;
}
.h-screen {
  height: 100vh;
}
.max-h-\[calc\(100vh-20rem\)\] {
  max-height: calc(100vh - 20rem);
}
.w-1\/3 {
  width: calc(1/3 * 100%);
}
.w-5\/6 {
  width: calc(5/6 * 100%);
}
.w-\[10ch\] {
  width: 10ch;
}
.w-\[40\%\] {
  width: 40%;
}
.w-\[60\%\] {
  width: 60%;
}
.w-\[80\%\] {
  width: 80%;
}
.w-fit {
  width: fit-content;
}
.w-full {
  width: 100%;
}
.w-screen {
  width: 100vw;
}
.flex-1 {
  flex: 1;
}
.-translate-y-\[50\%\] {
  --tw-translate-y: calc(50% * -1);
  translate: var(--tw-translate-x) var(--tw-translate-y);
}
.grid-cols-2 {
  grid-template-columns: repeat(2, minmax(0, 1fr));
}
.grid-cols-\[0\.25fr_1fr_1fr\] {
  grid-template-columns: 0.25fr 1fr 1fr;
}
.flex-col {
  flex-direction: column;
}
.flex-row {
  flex-direction: row;
}
.flex-wrap {
  flex-wrap: wrap;
}
.items-center {
  align-items: center;
}
.items-start {
  align-items: flex-start;
}
.justify-between {
  justify-content: space-between;
}
.justify-center {
  justify-content: center;
}
.justify-end {
  justify-content: flex-end;
}
.justify-items-stretch {
  justify-items: stretch;
}
.overflow-hidden {
  overflow: hidden;
}
.overflow-x-hidden {
  overflow-x: hidden;
}
.overflow-y-auto {
  overflow-y: auto;
}
.overflow-y-scroll {
  overflow-y: scroll;
}
.rounded-full {
  border-radius: calc(infinity * 1px);
}
.border {
  border-style: var(--tw-border-style);
  border-width: 1px;
}
.border-2 {
  border-style: var(--tw-border-style);
  border-width: 2px;
}
.border-\[4px\] {
  border-style: var(--tw-border-style);
  border-width: 4px;
}
.border-solid {
  --tw-border-style: solid;
  border-style: solid;
}
.bg-\[\#F1E6C9\] {
  background-color: #F1E6C9;
}
.bg-\[\#ffc6c6\] {
  background-color: #ffc6c6;
}
.bg-gradient-to-br {
  --tw-gradient-position: to bottom right in oklab,;
  background-image: linear-gradient(var(--tw-gradient-stops));
}
.bg-clip-padding {
  background-clip: padding-box;
}
.bg-no-repeat {
  background-repeat: no-repeat;
}
.px-\[calc\(100vw\/12\)\] {
  padding-inline: calc(100vw / 12);
}
.px-\[calc\(100vw\/24\)\] {
  padding-inline: calc(100vw / 24);
}
.text-center {
  text-align: center;
}
.text-left {
  text-align: left;
}
.text-right {
  text-align: right;
}
.\[line-height\:1\.75rem\] {
  line-height: 1.75rem;
}
.\[overflow-wrap\:break-word\] {
  overflow-wrap: break-word;
}
.whitespace-nowrap {
  white-space: nowrap;
}
.whitespace-pre-wrap {
  white-space: pre-wrap;
}
.text-\[\#FF3939\] {
  color: #FF3939;
}
.opacity-40 {
  opacity: 40%;
}
.opacity-50 {
  opacity: 50%;
}
.opacity-\[50\%\] {
  opacity: 50%;
}
.outline {
  outline-style: var(--tw-outline-style);
  outline-width: 1px;
}
.transition-all {
  transition-property: all;
  transition-timing-function: var(--tw-ease, ease);
  transition-duration: var(--tw-duration, 0s);
}
.\[clip-path\:polygon\(0\%_0\%\,100\%_0\%\,100\%_100\%\,0\%_100\%\)\] {
  clip-path: polygon(0% 0%,100% 0%,100% 100%,0% 100%);
}
.\[inline-size\:10ch\] {
  inline-size: 10ch;
}
.group-hover\:-translate-y-\[10\%\] {
  &:is(:where(.group):hover *) {
    @media (hover: hover) {
      --tw-translate-y: calc(10% * -1);
      translate: var(--tw-translate-x) var(--tw-translate-y);
    }
  }
}
.first-letter\:transition {
  &::first-letter {
    transition-property: color, background-color, border-color, outline-color, text-decoration-color, fill, stroke, --tw-gradient-from, --tw-gradient-via, --tw-gradient-to, opacity, box-shadow, transform, translate, scale, rotate, filter, -webkit-backdrop-filter, backdrop-filter;
    transition-timing-function: var(--tw-ease, ease);
    transition-duration: var(--tw-duration, 0s);
  }
}
.focus\:outline-none {
  &:focus {
    --tw-outline-style: none;
    outline-style: none;
  }
}
@property --tw-translate-x {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-translate-y {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-translate-z {
  syntax: "*";
  inherits: false;
  initial-value: 0;
}
@property --tw-border-style {
  syntax: "*";
  inherits: false;
  initial-value: solid;
}
@property --tw-outline-style {
  syntax: "*";
  inherits: false;
  initial-value: solid;
}
